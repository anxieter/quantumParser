
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA COMPLEX DO ELSE EQUAL FI ID IF LBRACKET MULTIEQUAL NUMBER OD PRINT RBRACKET SKIP THEN WHILESTATEMENTS : STATEMENTS STATEMENT\n                  | STATEMENTSTATEMENT : SKIPSTATEMENT : ID EQUAL NUMBERSTATEMENT : ID EQUAL MATRIXIDS : ID\n           | IDS COMMA IDSTATEMENT : IDS MULTIEQUAL ID MATRIX : LBRACKET ROWLIST RBRACKETROWLIST : ROWLIST COMMA ROWROWLIST : ROWROW : LBRACKET NUMBERLIST RBRACKETNUMBERLIST : NUMBER\n                 | COMPLEX\n                 | NUMBERLIST COMMA NUMBER\n                 | NUMBERLIST COMMA COMPLEXSTATEMENT : IF ID LBRACKET IDS RBRACKET EQUAL NUMBER THEN STATEMENTS ELSE STATEMENTS FISTATEMENT : WHILE ID LBRACKET IDS RBRACKET EQUAL NUMBER DO STATEMENTS ODSTATEMENT : PRINT LBRACKET IDS RBRACKET'
    
_lr_action_items = {'SKIP':([0,1,2,3,9,16,17,19,30,34,47,48,49,50,51,52,53,54,],[3,3,-2,-3,-1,-4,-5,-8,-19,-9,3,3,3,3,3,-18,3,-17,]),'ID':([0,1,2,3,6,7,9,11,12,15,16,17,19,21,22,30,34,47,48,49,50,51,52,53,54,],[4,4,-2,-3,13,14,-1,19,20,24,-4,-5,-8,24,24,-19,-9,4,4,4,4,4,-18,4,-17,]),'IF':([0,1,2,3,9,16,17,19,30,34,47,48,49,50,51,52,53,54,],[6,6,-2,-3,-1,-4,-5,-8,-19,-9,6,6,6,6,6,-18,6,-17,]),'WHILE':([0,1,2,3,9,16,17,19,30,34,47,48,49,50,51,52,53,54,],[7,7,-2,-3,-1,-4,-5,-8,-19,-9,7,7,7,7,7,-18,7,-17,]),'PRINT':([0,1,2,3,9,16,17,19,30,34,47,48,49,50,51,52,53,54,],[8,8,-2,-3,-1,-4,-5,-8,-19,-9,8,8,8,8,8,-18,8,-17,]),'$end':([1,2,3,9,16,17,19,30,34,52,54,],[0,-2,-3,-1,-4,-5,-8,-19,-9,-18,-17,]),'ELSE':([2,3,9,16,17,19,30,34,49,52,54,],[-2,-3,-1,-4,-5,-8,-19,-9,51,-18,-17,]),'OD':([2,3,9,16,17,19,30,34,50,52,54,],[-2,-3,-1,-4,-5,-8,-19,-9,52,-18,-17,]),'FI':([2,3,9,16,17,19,30,34,52,53,54,],[-2,-3,-1,-4,-5,-8,-19,-9,-18,54,-17,]),'EQUAL':([4,36,37,],[10,41,42,]),'MULTIEQUAL':([4,5,20,],[-6,11,-7,]),'COMMA':([4,5,20,23,24,26,27,28,29,31,32,33,38,40,43,44,],[-6,12,-7,12,-6,35,-11,12,12,39,-13,-14,-12,-10,-15,-16,]),'LBRACKET':([8,10,13,14,18,35,],[15,18,21,22,25,25,]),'NUMBER':([10,25,39,41,42,],[16,32,43,45,46,]),'RBRACKET':([20,23,24,26,27,28,29,31,32,33,38,40,43,44,],[-7,30,-6,34,-11,36,37,38,-13,-14,-12,-10,-15,-16,]),'COMPLEX':([25,39,],[33,44,]),'THEN':([45,],[47,]),'DO':([46,],[48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'STATEMENTS':([0,47,48,51,],[1,49,50,53,]),'STATEMENT':([0,1,47,48,49,50,51,53,],[2,9,2,2,9,9,2,9,]),'IDS':([0,1,15,21,22,47,48,49,50,51,53,],[5,5,23,28,29,5,5,5,5,5,5,]),'MATRIX':([10,],[17,]),'ROWLIST':([18,],[26,]),'ROW':([18,35,],[27,40,]),'NUMBERLIST':([25,],[31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> STATEMENTS","S'",1,None,None,None),
  ('STATEMENTS -> STATEMENTS STATEMENT','STATEMENTS',2,'p_statements','lexer.py',87),
  ('STATEMENTS -> STATEMENT','STATEMENTS',1,'p_statements','lexer.py',88),
  ('STATEMENT -> SKIP','STATEMENT',1,'p_statement_skip','lexer.py',95),
  ('STATEMENT -> ID EQUAL NUMBER','STATEMENT',3,'p_statement_assign','lexer.py',99),
  ('STATEMENT -> ID EQUAL MATRIX','STATEMENT',3,'p_statement_mat_assign','lexer.py',103),
  ('IDS -> ID','IDS',1,'p_multiple_IDs','lexer.py',107),
  ('IDS -> IDS COMMA ID','IDS',3,'p_multiple_IDs','lexer.py',108),
  ('STATEMENT -> IDS MULTIEQUAL ID','STATEMENT',3,'p_statement_unitary','lexer.py',115),
  ('MATRIX -> LBRACKET ROWLIST RBRACKET','MATRIX',3,'p_MATRIX','lexer.py',119),
  ('ROWLIST -> ROWLIST COMMA ROW','ROWLIST',3,'p_ROWLIST_multiple','lexer.py',123),
  ('ROWLIST -> ROW','ROWLIST',1,'p_ROWLIST_single','lexer.py',127),
  ('ROW -> LBRACKET NUMBERLIST RBRACKET','ROW',3,'p_ROW','lexer.py',131),
  ('NUMBERLIST -> NUMBER','NUMBERLIST',1,'p_NUMBERLIST','lexer.py',135),
  ('NUMBERLIST -> COMPLEX','NUMBERLIST',1,'p_NUMBERLIST','lexer.py',136),
  ('NUMBERLIST -> NUMBERLIST COMMA NUMBER','NUMBERLIST',3,'p_NUMBERLIST','lexer.py',137),
  ('NUMBERLIST -> NUMBERLIST COMMA COMPLEX','NUMBERLIST',3,'p_NUMBERLIST','lexer.py',138),
  ('STATEMENT -> IF ID LBRACKET IDS RBRACKET EQUAL NUMBER THEN STATEMENTS ELSE STATEMENTS FI','STATEMENT',12,'p_statement_if','lexer.py',145),
  ('STATEMENT -> WHILE ID LBRACKET IDS RBRACKET EQUAL NUMBER DO STATEMENTS OD','STATEMENT',10,'p_statement_while','lexer.py',148),
  ('STATEMENT -> PRINT LBRACKET IDS RBRACKET','STATEMENT',4,'p_print','lexer.py',152),
]
